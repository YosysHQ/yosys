read_verilog -icells <<EOT

module dff(input C, D, output [1:0] Q);
$_DFF_P_ ff0 (.C(C), .D(D), .Q(Q[0]));
$_DFF_N_ ff1 (.C(C), .D(D), .Q(Q[1]));
endmodule

module dffe(input C, E, D, output [2:0] Q);
$_DFFE_PP_ ff0 (.C(C), .E(E), .D(D), .Q(Q[0]));
$_DFFE_PN_ ff1 (.C(C), .E(E), .D(D), .Q(Q[1]));
$_DFFE_NP_ ff2 (.C(C), .E(E), .D(D), .Q(Q[2]));
endmodule

module sdff0(input C, R, D, output [2:0] Q);
$_SDFF_PP0_ ff0 (.C(C), .R(R), .D(D), .Q(Q[0]));
$_SDFF_PN0_ ff1 (.C(C), .R(R), .D(D), .Q(Q[1]));
$_SDFF_NP0_ ff2 (.C(C), .R(R), .D(D), .Q(Q[2]));
endmodule

module sdff1(input C, R, D, output [2:0] Q);
$_SDFF_PP1_ ff0 (.C(C), .R(R), .D(D), .Q(Q[0]));
$_SDFF_PN1_ ff1 (.C(C), .R(R), .D(D), .Q(Q[1]));
$_SDFF_NP1_ ff2 (.C(C), .R(R), .D(D), .Q(Q[2]));
endmodule

module sdffe0(input C, E, R, D, output [3:0] Q);
$_SDFFE_PP0P_ ff0 (.C(C), .R(R), .E(E), .D(D), .Q(Q[0]));
$_SDFFE_PP0N_ ff1 (.C(C), .R(R), .E(E), .D(D), .Q(Q[1]));
$_SDFFE_PN0P_ ff2 (.C(C), .R(R), .E(E), .D(D), .Q(Q[2]));
$_SDFFE_NP0P_ ff3 (.C(C), .R(R), .E(E), .D(D), .Q(Q[3]));
endmodule

module sdffe1(input C, E, R, D, output [3:0] Q);
$_SDFFE_PP1P_ ff0 (.C(C), .R(R), .E(E), .D(D), .Q(Q[0]));
$_SDFFE_PP1N_ ff1 (.C(C), .R(R), .E(E), .D(D), .Q(Q[1]));
$_SDFFE_PN1P_ ff2 (.C(C), .R(R), .E(E), .D(D), .Q(Q[2]));
$_SDFFE_NP1P_ ff3 (.C(C), .R(R), .E(E), .D(D), .Q(Q[3]));
endmodule

module sdffce0(input C, E, R, D, output [3:0] Q);
$_SDFFCE_PP0P_ ff0 (.C(C), .R(R), .E(E), .D(D), .Q(Q[0]));
$_SDFFCE_PP0N_ ff1 (.C(C), .R(R), .E(E), .D(D), .Q(Q[1]));
$_SDFFCE_PN0P_ ff2 (.C(C), .R(R), .E(E), .D(D), .Q(Q[2]));
$_SDFFCE_NP0P_ ff3 (.C(C), .R(R), .E(E), .D(D), .Q(Q[3]));
endmodule

module sdffce1(input C, E, R, D, output [3:0] Q);
$_SDFFCE_PP1P_ ff0 (.C(C), .R(R), .E(E), .D(D), .Q(Q[0]));
$_SDFFCE_PP1N_ ff1 (.C(C), .R(R), .E(E), .D(D), .Q(Q[1]));
$_SDFFCE_PN1P_ ff2 (.C(C), .R(R), .E(E), .D(D), .Q(Q[2]));
$_SDFFCE_NP1P_ ff3 (.C(C), .R(R), .E(E), .D(D), .Q(Q[3]));
endmodule

module top(input C, E, R, D, output [26:0] Q);
dff dff_(.C(C), .D(D), .Q(Q[1:0]));
dffe dffe_(.C(C), .E(E), .D(D), .Q(Q[4:2]));
sdff0 sdff0_(.C(C), .R(R), .D(D), .Q(Q[7:5]));
sdff1 sdff1_(.C(C), .R(R), .D(D), .Q(Q[10:8]));
sdffe0 sdffe0_(.C(C), .R(R), .E(E), .D(D), .Q(Q[14:11]));
sdffe1 sdffe1_(.C(C), .R(R), .E(E), .D(D), .Q(Q[18:15]));
sdffce0 sdffce0_(.C(C), .R(R), .E(E), .D(D), .Q(Q[22:19]));
sdffce1 sdffce1_(.C(C), .R(R), .E(E), .D(D), .Q(Q[26:23]));
endmodule

EOT

design -save orig
flatten
equiv_opt -assert -multiclock dfflegalize -cell $_DFF_P_ x
equiv_opt -assert -multiclock dfflegalize -cell $_DFFE_PP_ x
equiv_opt -assert -multiclock dfflegalize -cell $_DFF_PP0_ x
equiv_opt -assert -multiclock dfflegalize -cell $_DFFE_PP0P_ x
equiv_opt -assert -multiclock dfflegalize -cell $_DFFSR_PPP_ x
equiv_opt -assert -multiclock dfflegalize -cell $_DFFSRE_PPPP_ x
equiv_opt -assert -multiclock dfflegalize -cell $_SDFF_PP0_ x
equiv_opt -assert -multiclock dfflegalize -cell $_SDFFE_PP0P_ x
equiv_opt -assert -multiclock dfflegalize -cell $_SDFFCE_PP0P_ x

# Convert everything to DFFs.

design -load orig
dfflegalize -cell $_DFF_P_ x

select -assert-count 1 dff/t:$_NOT_
select -assert-count 1 dffe/t:$_NOT_
select -assert-count 1 sdff0/t:$_NOT_
select -assert-count 1 sdff1/t:$_NOT_
select -assert-count 1 sdffe0/t:$_NOT_
select -assert-count 1 sdffe1/t:$_NOT_
select -assert-count 1 sdffce0/t:$_NOT_
select -assert-count 1 sdffce1/t:$_NOT_
select -assert-count 0 dff/t:$_MUX_
select -assert-count 3 dffe/t:$_MUX_
select -assert-count 3 sdff0/t:$_MUX_
select -assert-count 3 sdff1/t:$_MUX_
select -assert-count 8 sdffe0/t:$_MUX_
select -assert-count 8 sdffe1/t:$_MUX_
select -assert-count 8 sdffce0/t:$_MUX_
select -assert-count 8 sdffce1/t:$_MUX_
select -assert-count 27 t:$_DFF_P_
select -assert-none t:$_DFF_P_ t:$_MUX_ t:$_NOT_ top/* %% %n t:* %i


# Convert everything to DFFEs.

design -load orig
dfflegalize -cell $_DFFE_PP_ x

select -assert-count 1 dff/t:$_NOT_
select -assert-count 2 dffe/t:$_NOT_
select -assert-count 1 sdff0/t:$_NOT_
select -assert-count 1 sdff1/t:$_NOT_
select -assert-count 1 sdffe0/t:$_NOT_
select -assert-count 1 sdffe1/t:$_NOT_
select -assert-count 2 sdffce0/t:$_NOT_
select -assert-count 2 sdffce1/t:$_NOT_
select -assert-count 0 dff/t:$_MUX_
select -assert-count 0 dffe/t:$_MUX_
select -assert-count 3 sdff0/t:$_MUX_
select -assert-count 3 sdff1/t:$_MUX_
select -assert-count 8 sdffe0/t:$_MUX_
select -assert-count 8 sdffe1/t:$_MUX_
select -assert-count 4 sdffce0/t:$_MUX_
select -assert-count 4 sdffce1/t:$_MUX_
select -assert-count 27 t:$_DFFE_PP_
select -assert-none t:$_DFFE_PP_ t:$_MUX_ t:$_NOT_ top/* %% %n t:* %i


# Convert everything to ADFFs.

design -load orig
dfflegalize -cell $_DFF_PP0_ x

select -assert-count 1 dff/t:$_NOT_
select -assert-count 1 dffe/t:$_NOT_
select -assert-count 1 sdff0/t:$_NOT_
select -assert-count 1 sdff1/t:$_NOT_
select -assert-count 1 sdffe0/t:$_NOT_
select -assert-count 1 sdffe1/t:$_NOT_
select -assert-count 1 sdffce0/t:$_NOT_
select -assert-count 1 sdffce1/t:$_NOT_
select -assert-count 0 dff/t:$_MUX_
select -assert-count 3 dffe/t:$_MUX_
select -assert-count 3 sdff0/t:$_MUX_
select -assert-count 3 sdff1/t:$_MUX_
select -assert-count 8 sdffe0/t:$_MUX_
select -assert-count 8 sdffe1/t:$_MUX_
select -assert-count 8 sdffce0/t:$_MUX_
select -assert-count 8 sdffce1/t:$_MUX_
select -assert-count 27 t:$_DFF_PP0_
select -assert-none t:$_DFF_PP0_ t:$_MUX_ t:$_NOT_ top/* %% %n t:* %i


# Convert everything to ADFFEs.

design -load orig
dfflegalize -cell $_DFFE_PP0P_ x

select -assert-count 1 dff/t:$_NOT_
select -assert-count 2 dffe/t:$_NOT_
select -assert-count 1 sdff0/t:$_NOT_
select -assert-count 1 sdff1/t:$_NOT_
select -assert-count 1 sdffe0/t:$_NOT_
select -assert-count 1 sdffe1/t:$_NOT_
select -assert-count 2 sdffce0/t:$_NOT_
select -assert-count 2 sdffce1/t:$_NOT_
select -assert-count 0 dff/t:$_MUX_
select -assert-count 0 dffe/t:$_MUX_
select -assert-count 3 sdff0/t:$_MUX_
select -assert-count 3 sdff1/t:$_MUX_
select -assert-count 8 sdffe0/t:$_MUX_
select -assert-count 8 sdffe1/t:$_MUX_
select -assert-count 4 sdffce0/t:$_MUX_
select -assert-count 4 sdffce1/t:$_MUX_
select -assert-count 27 t:$_DFFE_PP0P_
select -assert-none t:$_DFFE_PP0P_ t:$_MUX_ t:$_NOT_ top/* %% %n t:* %i


# Convert everything to DFFSRs.

design -load orig
dfflegalize -cell $_DFFSR_PPP_ x

select -assert-count 1 dff/t:$_NOT_
select -assert-count 1 dffe/t:$_NOT_
select -assert-count 1 sdff0/t:$_NOT_
select -assert-count 1 sdff1/t:$_NOT_
select -assert-count 1 sdffe0/t:$_NOT_
select -assert-count 1 sdffe1/t:$_NOT_
select -assert-count 1 sdffce0/t:$_NOT_
select -assert-count 1 sdffce1/t:$_NOT_
select -assert-count 0 dff/t:$_MUX_
select -assert-count 3 dffe/t:$_MUX_
select -assert-count 3 sdff0/t:$_MUX_
select -assert-count 3 sdff1/t:$_MUX_
select -assert-count 8 sdffe0/t:$_MUX_
select -assert-count 8 sdffe1/t:$_MUX_
select -assert-count 8 sdffce0/t:$_MUX_
select -assert-count 8 sdffce1/t:$_MUX_
select -assert-count 27 t:$_DFFSR_PPP_
select -assert-none t:$_DFFSR_PPP_ t:$_MUX_ t:$_NOT_ top/* %% %n t:* %i


# Convert everything to DFFSREs.

design -load orig
dfflegalize -cell $_DFFSRE_PPPP_ x

select -assert-count 1 dff/t:$_NOT_
select -assert-count 2 dffe/t:$_NOT_
select -assert-count 1 sdff0/t:$_NOT_
select -assert-count 1 sdff1/t:$_NOT_
select -assert-count 1 sdffe0/t:$_NOT_
select -assert-count 1 sdffe1/t:$_NOT_
select -assert-count 2 sdffce0/t:$_NOT_
select -assert-count 2 sdffce1/t:$_NOT_
select -assert-count 0 dff/t:$_MUX_
select -assert-count 0 dffe/t:$_MUX_
select -assert-count 3 sdff0/t:$_MUX_
select -assert-count 3 sdff1/t:$_MUX_
select -assert-count 8 sdffe0/t:$_MUX_
select -assert-count 8 sdffe1/t:$_MUX_
select -assert-count 4 sdffce0/t:$_MUX_
select -assert-count 4 sdffce1/t:$_MUX_
select -assert-count 27 t:$_DFFSRE_PPPP_
select -assert-none t:$_DFFSRE_PPPP_ t:$_MUX_ t:$_NOT_ top/* %% %n t:* %i


# Convert everything to SDFFs.

design -load orig
dfflegalize -cell $_SDFF_PP0_ x

select -assert-count 1 dff/t:$_NOT_
select -assert-count 1 dffe/t:$_NOT_
select -assert-count 2 sdff0/t:$_NOT_
select -assert-count 8 sdff1/t:$_NOT_
select -assert-count 2 sdffe0/t:$_NOT_
select -assert-count 10 sdffe1/t:$_NOT_
select -assert-count 2 sdffce0/t:$_NOT_
select -assert-count 10 sdffce1/t:$_NOT_
select -assert-count 0 dff/t:$_MUX_
select -assert-count 3 dffe/t:$_MUX_
select -assert-count 0 sdff0/t:$_MUX_
select -assert-count 0 sdff1/t:$_MUX_
select -assert-count 4 sdffe0/t:$_MUX_
select -assert-count 4 sdffe1/t:$_MUX_
select -assert-count 4 sdffce0/t:$_MUX_
select -assert-count 4 sdffce1/t:$_MUX_
select -assert-count 0 t:$_AND_ t:$_ORNOT_ t:$_ANDNOT_ %% sdffce0/* sdffce1/* %u %n %i
select -assert-count 2 sdffce0/t:$_AND_
select -assert-count 2 sdffce1/t:$_AND_
select -assert-count 1 sdffce0/t:$_ORNOT_
select -assert-count 1 sdffce1/t:$_ORNOT_
select -assert-count 1 sdffce0/t:$_ANDNOT_
select -assert-count 1 sdffce1/t:$_ANDNOT_
select -assert-count 27 t:$_SDFF_PP0_
select -assert-none t:$_SDFF_PP0_ t:$_MUX_ t:$_NOT_ t:$_AND_ t:$_ORNOT_ t:$_ANDNOT_ top/* %% %n t:* %i


# Convert everything to SDFFEs.

design -load orig
dfflegalize -cell $_SDFFE_PP0P_ x

select -assert-count 1 dff/t:$_NOT_
select -assert-count 2 dffe/t:$_NOT_
select -assert-count 2 sdff0/t:$_NOT_
select -assert-count 8 sdff1/t:$_NOT_
select -assert-count 3 sdffe0/t:$_NOT_
select -assert-count 11 sdffe1/t:$_NOT_
select -assert-count 3 sdffce0/t:$_NOT_
select -assert-count 11 sdffce1/t:$_NOT_
select -assert-count 0 t:$_AND_ t:$_ORNOT_ t:$_ANDNOT_ %% sdffce0/* sdffce1/* %u %n %i
select -assert-count 2 sdffce0/t:$_AND_
select -assert-count 2 sdffce1/t:$_AND_
select -assert-count 1 sdffce0/t:$_ORNOT_
select -assert-count 1 sdffce1/t:$_ORNOT_
select -assert-count 1 sdffce0/t:$_ANDNOT_
select -assert-count 1 sdffce1/t:$_ANDNOT_
select -assert-count 27 t:$_SDFFE_PP0P_
select -assert-none t:$_SDFFE_PP0P_ t:$_NOT_ t:$_AND_ t:$_ORNOT_ t:$_ANDNOT_ top/* %% %n t:* %i


# Convert everything to SDFFCEs.

design -load orig
dfflegalize -cell $_SDFFCE_PP0P_ x

select -assert-count 1 dff/t:$_NOT_
select -assert-count 2 dffe/t:$_NOT_
select -assert-count 2 sdff0/t:$_NOT_
select -assert-count 8 sdff1/t:$_NOT_
select -assert-count 3 sdffe0/t:$_NOT_
select -assert-count 11 sdffe1/t:$_NOT_
select -assert-count 3 sdffce0/t:$_NOT_
select -assert-count 11 sdffce1/t:$_NOT_
select -assert-count 0 t:$_OR_ t:$_ORNOT_ t:$_ANDNOT_ %% sdffe0/* sdffe1/* %u %n %i
select -assert-count 2 sdffe0/t:$_OR_
select -assert-count 2 sdffe1/t:$_OR_
select -assert-count 1 sdffe0/t:$_ORNOT_
select -assert-count 1 sdffe1/t:$_ORNOT_
select -assert-count 1 sdffe0/t:$_ANDNOT_
select -assert-count 1 sdffe1/t:$_ANDNOT_
select -assert-count 27 t:$_SDFFCE_PP0P_
select -assert-none t:$_SDFFCE_PP0P_ t:$_NOT_ t:$_OR_ t:$_ORNOT_ t:$_ANDNOT_ top/* %% %n t:* %i
