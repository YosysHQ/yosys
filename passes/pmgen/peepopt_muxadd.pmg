pattern muxadd
//
// Authored by Akash Levy and Alain Dargelas of Silimate, Inc. under ISC license.
// Transforms add->mux into mux->add:
// y = s ? (a + b) : a   ===>   y = a + (s ? b : 0)
//

state <SigSpec> add_a add_b add_y add_a_ext
state <Const> add_a_signed
state <IdString> add_a_id add_b_id

match add
	// Select adder
	select add->type == $add
	choice <IdString> A {\A, \B}
	define <IdString> B (A == \A ? \B : \A)
	set add_y port(add, \Y)
	set add_a port(add, A)
	set add_b port(add, B)
	set add_a_signed param(add, (A == \A) ? \A_SIGNED : \B_SIGNED)
	set add_a_id A
	set add_b_id B
endmatch

code add_y add_a add_b add_a_ext
	// Get adder signals
	add_a_ext = SigSpec(port(add, add_a_id));
	add_a_ext.extend_u0(GetSize(add_y), add_a_signed.as_bool());
	// Fanout of each adder Y bit should be 1 (no bit-split)
	if (nusers(add_y) != 2)
		reject;

endcode

match mux
	// Select mux of form s ? (a + b) : a, allow leading 0s when A_WIDTH != Y_WIDTH
	select mux->type == $mux
	index <SigSpec> port(mux, \A) === add_a_ext
	index <SigSpec> port(mux, \B) === add_y
endmatch

code
	// Get mux signal
	SigSpec mux_y = port(mux, \Y);
	SigSpec mux_a = port(mux, \A);
	SigSpec mux_b = port(mux, \B);
	
	// Create new mid wire
	SigSpec mid = module->addWire(NEW_ID, GetSize(add_b));

	// Rewire

	// Start by renaming the lhs of an eventual assign stmt where the rhs is the adder output (That is getting rewired).
	// Renaming the signal allows equiv_opt to function as it would otherwize try to match the functionality witch would fail
	// as the lhs signal has indeed changed function.
	std::string adder_y_name = add_y.as_wire()->name.c_str();
	for (auto it = module->connections().begin(); it != module->connections().end(); ++it) {
		RTLIL::SigSpec rhs = it->second;
		const std::string& rhs_name = rhs.as_wire()->name.c_str();
		if (rhs_name == adder_y_name) {
			RTLIL::SigSpec lhs = it->first;
			const std::string& lhs_name =  lhs.as_wire()->name.c_str();
			module->rename(lhs_name, module->uniquify("$" + lhs_name));
			break;
		}
	}

	add->setPort(\B, mid);
	add->setPort(\A, add_a);
	add->setPort(\Y, add_y);
	mux->setPort(add_a_id, Const(State::S0, GetSize(add_b)));
	mux->setPort(add_b_id, add_b);
	mux->setPort(\Y, mid);
	module->connect(mux_y, add_y);
	// Log, fixup, accept
	log("muxadd pattern in %s: mux=%s, add=%s\n", log_id(module), log_id(mux), log_id(add));
	add->fixup_parameters();
	mux->fixup_parameters();
	did_something = true;
	accept;
	
endcode
